// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debugger.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "debugger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnounceDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnounceDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionDetails_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExecutionDetails_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DebugCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DebugCommand_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessage_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProcessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionArgument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionArgument_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLFunctions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLFunctions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DebugType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_debugger_2eproto() {
  protobuf_AddDesc_debugger_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "debugger.proto");
  GOOGLE_CHECK(file != NULL);
  Version_descriptor_ = file->message_type(0);
  static const int Version_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, revision_),
  };
  Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Version_descriptor_,
      Version::default_instance_,
      Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Version));
  AnnounceDetails_descriptor_ = file->message_type(1);
  static const int AnnounceDetails_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceDetails, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceDetails, client_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceDetails, version_),
  };
  AnnounceDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnnounceDetails_descriptor_,
      AnnounceDetails::default_instance_,
      AnnounceDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnnounceDetails));
  ExecutionDetails_descriptor_ = file->message_type(2);
  static const int ExecutionDetails_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionDetails, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionDetails, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionDetails, call_),
  };
  ExecutionDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionDetails_descriptor_,
      ExecutionDetails::default_instance_,
      ExecutionDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionDetails));
  ExecutionDetails_Operation_descriptor_ = ExecutionDetails_descriptor_->enum_type(0);
  DebugCommand_descriptor_ = file->message_type(3);
  static const int DebugCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCommand, type_),
  };
  DebugCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugCommand_descriptor_,
      DebugCommand::default_instance_,
      DebugCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugCommand));
  DebugCommand_Type_descriptor_ = DebugCommand_descriptor_->enum_type(0);
  ClientMessage_descriptor_ = file->message_type(4);
  static const int ClientMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, announce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, execution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, command_),
  };
  ClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_descriptor_,
      ClientMessage::default_instance_,
      ClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage));
  ClientMessage_Type_descriptor_ = ClientMessage_descriptor_->enum_type(0);
  ProcessInfo_descriptor_ = file->message_type(5);
  static const int ProcessInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, executable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, is64bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, thread_id_),
  };
  ProcessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessInfo_descriptor_,
      ProcessInfo::default_instance_,
      ProcessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessInfo));
  FunctionArgument_descriptor_ = file->message_type(6);
  static const int FunctionArgument_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionArgument, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionArgument, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionArgument, data_),
  };
  FunctionArgument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionArgument_descriptor_,
      FunctionArgument::default_instance_,
      FunctionArgument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionArgument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionArgument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionArgument));
  FunctionCall_descriptor_ = file->message_type(7);
  static const int FunctionCall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, return_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, return_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, arguments_),
  };
  FunctionCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionCall_descriptor_,
      FunctionCall::default_instance_,
      FunctionCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionCall));
  GLFunction_descriptor_ = file->message_type(8);
  static const int GLFunction_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, extname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, is_debuggable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, primitive_mode_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, is_shader_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, is_frame_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, is_framebuffer_change_),
  };
  GLFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLFunction_descriptor_,
      GLFunction::default_instance_,
      GLFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLFunction));
  GLFunctions_descriptor_ = file->message_type(9);
  static const int GLFunctions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunctions, function_),
  };
  GLFunctions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLFunctions_descriptor_,
      GLFunctions::default_instance_,
      GLFunctions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunctions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLFunctions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLFunctions));
  ServerMessage_descriptor_ = file->message_type(10);
  static const int ServerMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, function_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, gl_functions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, proc_info_),
  };
  ServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMessage_descriptor_,
      ServerMessage::default_instance_,
      ServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMessage));
  DebugType_descriptor_ = file->enum_type(0);
  ErrorCode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_debugger_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Version_descriptor_, &Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnnounceDetails_descriptor_, &AnnounceDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionDetails_descriptor_, &ExecutionDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugCommand_descriptor_, &DebugCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_descriptor_, &ClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessInfo_descriptor_, &ProcessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionArgument_descriptor_, &FunctionArgument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionCall_descriptor_, &FunctionCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLFunction_descriptor_, &GLFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLFunctions_descriptor_, &GLFunctions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMessage_descriptor_, &ServerMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_debugger_2eproto() {
  delete Version::default_instance_;
  delete Version_reflection_;
  delete AnnounceDetails::default_instance_;
  delete AnnounceDetails_reflection_;
  delete ExecutionDetails::default_instance_;
  delete ExecutionDetails_reflection_;
  delete DebugCommand::default_instance_;
  delete DebugCommand_reflection_;
  delete ClientMessage::default_instance_;
  delete ClientMessage_reflection_;
  delete ProcessInfo::default_instance_;
  delete ProcessInfo_reflection_;
  delete FunctionArgument::default_instance_;
  delete FunctionArgument_reflection_;
  delete FunctionCall::default_instance_;
  delete FunctionCall_reflection_;
  delete GLFunction::default_instance_;
  delete GLFunction_reflection_;
  delete GLFunctions::default_instance_;
  delete GLFunctions_reflection_;
  delete ServerMessage::default_instance_;
  delete ServerMessage_reflection_;
}

void protobuf_AddDesc_debugger_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016debugger.proto\022\005proto\"9\n\007Version\022\r\n\005ma"
    "jor\030\001 \002(\005\022\r\n\005minor\030\002 \002(\005\022\020\n\010revision\030\003 \002"
    "(\005\"S\n\017AnnounceDetails\022\n\n\002id\030\001 \002(\005\022\023\n\013cli"
    "ent_name\030\002 \002(\t\022\037\n\007version\030\003 \002(\0132\016.proto."
    "Version\"\352\001\n\020ExecutionDetails\0224\n\toperatio"
    "n\030\001 \002(\0162!.proto.ExecutionDetails.Operati"
    "on\022\021\n\tthread_id\030\002 \002(\005\022!\n\004call\030\003 \001(\0132\023.pr"
    "oto.FunctionCall\"j\n\tOperation\022\014\n\010CONTINU"
    "E\020\000\022\010\n\004HALT\020\001\022\010\n\004STEP\020\002\022\024\n\020TO_SHADER_SWI"
    "TCH\020\003\022\020\n\014TO_DRAW_CALL\020\004\022\023\n\017TO_USER_DEFIN"
    "ED\020\005\"\205\004\n\014DebugCommand\022&\n\004type\030\001 \002(\0162\030.pr"
    "oto.DebugCommand.Type\"\314\003\n\004Type\022\010\n\004DONE\020\001"
    "\022\021\n\rCALL_FUNCTION\020\002\022\017\n\013RECORD_CALL\020\003\022\025\n\021"
    "CALL_ORIGFUNCTION\020\004\022\013\n\007EXECUTE\020\005\022\r\n\tALLO"
    "C_MEM\020\006\022\014\n\010FREE_MEM\020\007\022\026\n\022READ_RENDER_BUF"
    "FER\020\010\022\027\n\023CLEAR_RENDER_BUFFER\020\t\022\022\n\016SET_DB"
    "G_TARGET\020\n\022\031\n\025RESTORE_RENDER_TARGET\020\013\022\023\n"
    "\017START_RECORDING\020\014\022\n\n\006REPLAY\020\r\022\016\n\nEND_RE"
    "PLAY\020\016\022\027\n\023STORE_ACTIVE_SHADER\020\017\022\031\n\025RESTO"
    "RE_ACTIVE_SHADER\020\020\022\022\n\016SET_DBG_SHADER\020\021\022\023"
    "\n\017GET_SHADER_CODE\020\022\022\017\n\013SHADER_STEP\020\023\022\036\n\032"
    "SAVE_AND_INTERRUPT_QUERIES\020\024\022\023\n\017RESTART_"
    "QUERIES\020\025\022!\n\035CALL_ORIGFUNCTION_AND_PROCE"
    "ED\020\026\"\302\002\n\rClientMessage\022\'\n\004type\030\001 \002(\0162\031.p"
    "roto.ClientMessage.Type\022\n\n\002id\030\002 \002(\004\022\021\n\tt"
    "hread_id\030\003 \001(\004\022(\n\010announce\030\004 \001(\0132\026.proto"
    ".AnnounceDetails\022*\n\texecution\030\005 \001(\0132\027.pr"
    "oto.ExecutionDetails\022$\n\007command\030\006 \001(\0132\023."
    "proto.DebugCommand\"m\n\004Type\022\014\n\010ANNOUNCE\020\000"
    "\022\020\n\014PROCESS_INFO\020\001\022\020\n\014GL_FUNCTIONS\020\002\022\021\n\r"
    "FUNCTION_CALL\020\003\022\r\n\tEXECUTION\020\004\022\021\n\rDEBUG_"
    "COMMAND\020\005\"R\n\013ProcessInfo\022\022\n\nexecutable\030\001"
    " \002(\t\022\013\n\003pid\030\002 \002(\005\022\017\n\007is64bit\030\003 \002(\010\022\021\n\tth"
    "read_id\030\004 \003(\004\"Q\n\020FunctionArgument\022\036\n\004typ"
    "e\030\001 \002(\0162\020.proto.DebugType\022\017\n\007address\030\002 \002"
    "(\004\022\014\n\004data\030\003 \002(\014\"\227\001\n\014FunctionCall\022\014\n\004nam"
    "e\030\001 \002(\t\022\021\n\tthread_id\030\002 \001(\004\022%\n\013return_typ"
    "e\030\003 \001(\0162\020.proto.DebugType\022\023\n\013return_data"
    "\030\004 \001(\014\022*\n\targuments\030\005 \003(\0132\027.proto.Functi"
    "onArgument\"\277\001\n\nGLFunction\022\016\n\006prefix\030\001 \002("
    "\t\022\017\n\007extname\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\025\n\ris_d"
    "ebuggable\030\004 \002(\010\022\034\n\024primitive_mode_index\030"
    "\005 \002(\005\022\030\n\020is_shader_switch\030\006 \002(\010\022\024\n\014is_fr"
    "ame_end\030\007 \002(\010\022\035\n\025is_framebuffer_change\030\010"
    " \002(\010\"2\n\013GLFunctions\022#\n\010function\030\001 \003(\0132\021."
    "proto.GLFunction\"\325\001\n\rServerMessage\022*\n\ner"
    "ror_code\030\001 \002(\0162\020.proto.ErrorCode:\004NONE\022\n"
    "\n\002id\030\002 \002(\004\022\017\n\007message\030\003 \001(\t\022*\n\rfunction_"
    "call\030\004 \003(\0132\023.proto.FunctionCall\022(\n\014gl_fu"
    "nctions\030\005 \001(\0132\022.proto.GLFunctions\022%\n\tpro"
    "c_info\030\006 \001(\0132\022.proto.ProcessInfo*\230\002\n\tDeb"
    "ugType\022\010\n\004CHAR\020\000\022\021\n\rUNSIGNED_CHAR\020\001\022\t\n\005S"
    "HORT\020\002\022\022\n\016UNSIGNED_SHORT\020\003\022\007\n\003INT\020\004\022\020\n\014U"
    "NSIGNED_INT\020\005\022\014\n\010LONG_INT\020\006\022\025\n\021UNSIGNED_"
    "LONG_INT\020\007\022\021\n\rLONG_LONG_INT\020\010\022\032\n\026UNSIGNE"
    "D_LONG_LONG_INT\020\t\022\t\n\005FLOAT\020\n\022\n\n\006DOUBLE\020\013"
    "\022\016\n\nLONGDOUBLE\020\014\022\013\n\007POINTER\020\r\022\n\n\006STRUCT\020"
    "\016\022\014\n\010BITFIELD\020\017\022\010\n\004ENUM\020\020\022\010\n\004BOOL\020\021*d\n\tE"
    "rrorCode\022\010\n\004NONE\020\000\022\023\n\017HEADER_MISMATCH\020\001\022"
    "\024\n\020VERSION_MISMATCH\020\002\022\017\n\013AUTH_FAILED\020\003\022\021"
    "\n\rGENERIC_ERROR\020\004", 2417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "debugger.proto", &protobuf_RegisterTypes);
  Version::default_instance_ = new Version();
  AnnounceDetails::default_instance_ = new AnnounceDetails();
  ExecutionDetails::default_instance_ = new ExecutionDetails();
  DebugCommand::default_instance_ = new DebugCommand();
  ClientMessage::default_instance_ = new ClientMessage();
  ProcessInfo::default_instance_ = new ProcessInfo();
  FunctionArgument::default_instance_ = new FunctionArgument();
  FunctionCall::default_instance_ = new FunctionCall();
  GLFunction::default_instance_ = new GLFunction();
  GLFunctions::default_instance_ = new GLFunctions();
  ServerMessage::default_instance_ = new ServerMessage();
  Version::default_instance_->InitAsDefaultInstance();
  AnnounceDetails::default_instance_->InitAsDefaultInstance();
  ExecutionDetails::default_instance_->InitAsDefaultInstance();
  DebugCommand::default_instance_->InitAsDefaultInstance();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  ProcessInfo::default_instance_->InitAsDefaultInstance();
  FunctionArgument::default_instance_->InitAsDefaultInstance();
  FunctionCall::default_instance_->InitAsDefaultInstance();
  GLFunction::default_instance_->InitAsDefaultInstance();
  GLFunctions::default_instance_->InitAsDefaultInstance();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_debugger_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_debugger_2eproto {
  StaticDescriptorInitializer_debugger_2eproto() {
    protobuf_AddDesc_debugger_2eproto();
  }
} static_descriptor_initializer_debugger_2eproto_;
const ::google::protobuf::EnumDescriptor* DebugType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugType_descriptor_;
}
bool DebugType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Version::kMajorFieldNumber;
const int Version::kMinorFieldNumber;
const int Version::kRevisionFieldNumber;
#endif  // !_MSC_VER

Version::Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Version::InitAsDefaultInstance() {
}

Version::Version(const Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Version::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
  revision_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Version::~Version() {
  SharedDtor();
}

void Version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Version_descriptor_;
}

const Version& Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

Version* Version::default_instance_ = NULL;

Version* Version::New() const {
  return new Version;
}

void Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_ = 0;
    minor_ = 0;
    revision_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 major = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // required int32 minor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_revision;
        break;
      }

      // required int32 revision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 major = 1;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }

  // required int32 minor = 2;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }

  // required int32 revision = 3;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->revision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 major = 1;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major(), target);
  }

  // required int32 minor = 2;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor(), target);
  }

  // required int32 revision = 3;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->revision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major());
    }

    // required int32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor());
    }

    // required int32 revision = 3;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revision());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Version::Swap(Version* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Version_descriptor_;
  metadata.reflection = Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnnounceDetails::kIdFieldNumber;
const int AnnounceDetails::kClientNameFieldNumber;
const int AnnounceDetails::kVersionFieldNumber;
#endif  // !_MSC_VER

AnnounceDetails::AnnounceDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnnounceDetails::InitAsDefaultInstance() {
  version_ = const_cast< ::proto::Version*>(&::proto::Version::default_instance());
}

AnnounceDetails::AnnounceDetails(const AnnounceDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnnounceDetails::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnounceDetails::~AnnounceDetails() {
  SharedDtor();
}

void AnnounceDetails::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::kEmptyString) {
    delete client_name_;
  }
  if (this != default_instance_) {
    delete version_;
  }
}

void AnnounceDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnounceDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnounceDetails_descriptor_;
}

const AnnounceDetails& AnnounceDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

AnnounceDetails* AnnounceDetails::default_instance_ = NULL;

AnnounceDetails* AnnounceDetails::New() const {
  return new AnnounceDetails;
}

void AnnounceDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_client_name()) {
      if (client_name_ != &::google::protobuf::internal::kEmptyString) {
        client_name_->clear();
      }
    }
    if (has_version()) {
      if (version_ != NULL) version_->::proto::Version::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnnounceDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_name;
        break;
      }

      // required string client_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // required .proto.Version version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnnounceDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string client_name = 2;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->client_name(), output);
  }

  // required .proto.Version version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnnounceDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string client_name = 2;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_name(), target);
  }

  // required .proto.Version version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnnounceDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string client_name = 2;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // required .proto.Version version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnounceDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnnounceDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnnounceDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnnounceDetails::MergeFrom(const AnnounceDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
    if (from.has_version()) {
      mutable_version()->::proto::Version::MergeFrom(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnnounceDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnounceDetails::CopyFrom(const AnnounceDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_version()) {
    if (!this->version().IsInitialized()) return false;
  }
  return true;
}

void AnnounceDetails::Swap(AnnounceDetails* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(client_name_, other->client_name_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnnounceDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnounceDetails_descriptor_;
  metadata.reflection = AnnounceDetails_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExecutionDetails_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionDetails_Operation_descriptor_;
}
bool ExecutionDetails_Operation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExecutionDetails_Operation ExecutionDetails::CONTINUE;
const ExecutionDetails_Operation ExecutionDetails::HALT;
const ExecutionDetails_Operation ExecutionDetails::STEP;
const ExecutionDetails_Operation ExecutionDetails::TO_SHADER_SWITCH;
const ExecutionDetails_Operation ExecutionDetails::TO_DRAW_CALL;
const ExecutionDetails_Operation ExecutionDetails::TO_USER_DEFINED;
const ExecutionDetails_Operation ExecutionDetails::Operation_MIN;
const ExecutionDetails_Operation ExecutionDetails::Operation_MAX;
const int ExecutionDetails::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExecutionDetails::kOperationFieldNumber;
const int ExecutionDetails::kThreadIdFieldNumber;
const int ExecutionDetails::kCallFieldNumber;
#endif  // !_MSC_VER

ExecutionDetails::ExecutionDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionDetails::InitAsDefaultInstance() {
  call_ = const_cast< ::proto::FunctionCall*>(&::proto::FunctionCall::default_instance());
}

ExecutionDetails::ExecutionDetails(const ExecutionDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionDetails::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 0;
  thread_id_ = 0;
  call_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionDetails::~ExecutionDetails() {
  SharedDtor();
}

void ExecutionDetails::SharedDtor() {
  if (this != default_instance_) {
    delete call_;
  }
}

void ExecutionDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionDetails_descriptor_;
}

const ExecutionDetails& ExecutionDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

ExecutionDetails* ExecutionDetails::default_instance_ = NULL;

ExecutionDetails* ExecutionDetails::New() const {
  return new ExecutionDetails;
}

void ExecutionDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 0;
    thread_id_ = 0;
    if (has_call()) {
      if (call_ != NULL) call_->::proto::FunctionCall::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ExecutionDetails.Operation operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::ExecutionDetails_Operation_IsValid(value)) {
            set_operation(static_cast< ::proto::ExecutionDetails_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }

      // required int32 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_call;
        break;
      }

      // optional .proto.FunctionCall call = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ExecutionDetails.Operation operation = 1;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // required int32 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thread_id(), output);
  }

  // optional .proto.FunctionCall call = 3;
  if (has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->call(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ExecutionDetails.Operation operation = 1;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // required int32 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thread_id(), target);
  }

  // optional .proto.FunctionCall call = 3;
  if (has_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->call(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ExecutionDetails.Operation operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // required int32 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_id());
    }

    // optional .proto.FunctionCall call = 3;
    if (has_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionDetails::MergeFrom(const ExecutionDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_call()) {
      mutable_call()->::proto::FunctionCall::MergeFrom(from.call());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionDetails::CopyFrom(const ExecutionDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_call()) {
    if (!this->call().IsInitialized()) return false;
  }
  return true;
}

void ExecutionDetails::Swap(ExecutionDetails* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(call_, other->call_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionDetails_descriptor_;
  metadata.reflection = ExecutionDetails_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DebugCommand_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugCommand_Type_descriptor_;
}
bool DebugCommand_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DebugCommand_Type DebugCommand::DONE;
const DebugCommand_Type DebugCommand::CALL_FUNCTION;
const DebugCommand_Type DebugCommand::RECORD_CALL;
const DebugCommand_Type DebugCommand::CALL_ORIGFUNCTION;
const DebugCommand_Type DebugCommand::EXECUTE;
const DebugCommand_Type DebugCommand::ALLOC_MEM;
const DebugCommand_Type DebugCommand::FREE_MEM;
const DebugCommand_Type DebugCommand::READ_RENDER_BUFFER;
const DebugCommand_Type DebugCommand::CLEAR_RENDER_BUFFER;
const DebugCommand_Type DebugCommand::SET_DBG_TARGET;
const DebugCommand_Type DebugCommand::RESTORE_RENDER_TARGET;
const DebugCommand_Type DebugCommand::START_RECORDING;
const DebugCommand_Type DebugCommand::REPLAY;
const DebugCommand_Type DebugCommand::END_REPLAY;
const DebugCommand_Type DebugCommand::STORE_ACTIVE_SHADER;
const DebugCommand_Type DebugCommand::RESTORE_ACTIVE_SHADER;
const DebugCommand_Type DebugCommand::SET_DBG_SHADER;
const DebugCommand_Type DebugCommand::GET_SHADER_CODE;
const DebugCommand_Type DebugCommand::SHADER_STEP;
const DebugCommand_Type DebugCommand::SAVE_AND_INTERRUPT_QUERIES;
const DebugCommand_Type DebugCommand::RESTART_QUERIES;
const DebugCommand_Type DebugCommand::CALL_ORIGFUNCTION_AND_PROCEED;
const DebugCommand_Type DebugCommand::Type_MIN;
const DebugCommand_Type DebugCommand::Type_MAX;
const int DebugCommand::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DebugCommand::kTypeFieldNumber;
#endif  // !_MSC_VER

DebugCommand::DebugCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugCommand::InitAsDefaultInstance() {
}

DebugCommand::DebugCommand(const DebugCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugCommand::~DebugCommand() {
  SharedDtor();
}

void DebugCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugCommand_descriptor_;
}

const DebugCommand& DebugCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

DebugCommand* DebugCommand::default_instance_ = NULL;

DebugCommand* DebugCommand::New() const {
  return new DebugCommand;
}

void DebugCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.DebugCommand.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::DebugCommand_Type_IsValid(value)) {
            set_type(static_cast< ::proto::DebugCommand_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.DebugCommand.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.DebugCommand.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.DebugCommand.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugCommand::MergeFrom(const DebugCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugCommand::CopyFrom(const DebugCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DebugCommand::Swap(DebugCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugCommand_descriptor_;
  metadata.reflection = DebugCommand_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_Type_descriptor_;
}
bool ClientMessage_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessage_Type ClientMessage::ANNOUNCE;
const ClientMessage_Type ClientMessage::PROCESS_INFO;
const ClientMessage_Type ClientMessage::GL_FUNCTIONS;
const ClientMessage_Type ClientMessage::FUNCTION_CALL;
const ClientMessage_Type ClientMessage::EXECUTION;
const ClientMessage_Type ClientMessage::DEBUG_COMMAND;
const ClientMessage_Type ClientMessage::Type_MIN;
const ClientMessage_Type ClientMessage::Type_MAX;
const int ClientMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientMessage::kTypeFieldNumber;
const int ClientMessage::kIdFieldNumber;
const int ClientMessage::kThreadIdFieldNumber;
const int ClientMessage::kAnnounceFieldNumber;
const int ClientMessage::kExecutionFieldNumber;
const int ClientMessage::kCommandFieldNumber;
#endif  // !_MSC_VER

ClientMessage::ClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage::InitAsDefaultInstance() {
  announce_ = const_cast< ::proto::AnnounceDetails*>(&::proto::AnnounceDetails::default_instance());
  execution_ = const_cast< ::proto::ExecutionDetails*>(&::proto::ExecutionDetails::default_instance());
  command_ = const_cast< ::proto::DebugCommand*>(&::proto::DebugCommand::default_instance());
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  thread_id_ = GOOGLE_ULONGLONG(0);
  announce_ = NULL;
  execution_ = NULL;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage::~ClientMessage() {
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != default_instance_) {
    delete announce_;
    delete execution_;
    delete command_;
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_descriptor_;
}

const ClientMessage& ClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New() const {
  return new ClientMessage;
}

void ClientMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    thread_id_ = GOOGLE_ULONGLONG(0);
    if (has_announce()) {
      if (announce_ != NULL) announce_->::proto::AnnounceDetails::Clear();
    }
    if (has_execution()) {
      if (execution_ != NULL) execution_->::proto::ExecutionDetails::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::proto::DebugCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ClientMessage.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::ClientMessage_Type_IsValid(value)) {
            set_type(static_cast< ::proto::ClientMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_thread_id;
        break;
      }

      // optional uint64 thread_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_announce;
        break;
      }

      // optional .proto.AnnounceDetails announce = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_announce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_execution;
        break;
      }

      // optional .proto.ExecutionDetails execution = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_command;
        break;
      }

      // optional .proto.DebugCommand command = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ClientMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint64 thread_id = 3;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->thread_id(), output);
  }

  // optional .proto.AnnounceDetails announce = 4;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->announce(), output);
  }

  // optional .proto.ExecutionDetails execution = 5;
  if (has_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->execution(), output);
  }

  // optional .proto.DebugCommand command = 6;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ClientMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint64 thread_id = 3;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->thread_id(), target);
  }

  // optional .proto.AnnounceDetails announce = 4;
  if (has_announce()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->announce(), target);
  }

  // optional .proto.ExecutionDetails execution = 5;
  if (has_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->execution(), target);
  }

  // optional .proto.DebugCommand command = 6;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ClientMessage.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 thread_id = 3;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }

    // optional .proto.AnnounceDetails announce = 4;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->announce());
    }

    // optional .proto.ExecutionDetails execution = 5;
    if (has_execution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->execution());
    }

    // optional .proto.DebugCommand command = 6;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_announce()) {
      mutable_announce()->::proto::AnnounceDetails::MergeFrom(from.announce());
    }
    if (from.has_execution()) {
      mutable_execution()->::proto::ExecutionDetails::MergeFrom(from.execution());
    }
    if (from.has_command()) {
      mutable_command()->::proto::DebugCommand::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_announce()) {
    if (!this->announce().IsInitialized()) return false;
  }
  if (has_execution()) {
    if (!this->execution().IsInitialized()) return false;
  }
  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(announce_, other->announce_);
    std::swap(execution_, other->execution_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_descriptor_;
  metadata.reflection = ClientMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessInfo::kExecutableFieldNumber;
const int ProcessInfo::kPidFieldNumber;
const int ProcessInfo::kIs64BitFieldNumber;
const int ProcessInfo::kThreadIdFieldNumber;
#endif  // !_MSC_VER

ProcessInfo::ProcessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessInfo::InitAsDefaultInstance() {
}

ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessInfo::SharedCtor() {
  _cached_size_ = 0;
  executable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = 0;
  is64bit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessInfo::~ProcessInfo() {
  SharedDtor();
}

void ProcessInfo::SharedDtor() {
  if (executable_ != &::google::protobuf::internal::kEmptyString) {
    delete executable_;
  }
  if (this != default_instance_) {
  }
}

void ProcessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessInfo_descriptor_;
}

const ProcessInfo& ProcessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

ProcessInfo* ProcessInfo::default_instance_ = NULL;

ProcessInfo* ProcessInfo::New() const {
  return new ProcessInfo;
}

void ProcessInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_executable()) {
      if (executable_ != &::google::protobuf::internal::kEmptyString) {
        executable_->clear();
      }
    }
    pid_ = 0;
    is64bit_ = false;
  }
  thread_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string executable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executable().data(), this->executable().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // required int32 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is64bit;
        break;
      }

      // required bool is64bit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is64bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is64bit_)));
          set_has_is64bit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_thread_id;
        break;
      }

      // repeated uint64 thread_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_thread_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_thread_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_thread_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string executable = 1;
  if (has_executable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executable().data(), this->executable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->executable(), output);
  }

  // required int32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  // required bool is64bit = 3;
  if (has_is64bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is64bit(), output);
  }

  // repeated uint64 thread_id = 4;
  for (int i = 0; i < this->thread_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->thread_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string executable = 1;
  if (has_executable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executable().data(), this->executable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->executable(), target);
  }

  // required int32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  // required bool is64bit = 3;
  if (has_is64bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is64bit(), target);
  }

  // repeated uint64 thread_id = 4;
  for (int i = 0; i < this->thread_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->thread_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string executable = 1;
    if (has_executable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executable());
    }

    // required int32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // required bool is64bit = 3;
    if (has_is64bit()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 thread_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->thread_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->thread_id(i));
    }
    total_size += 1 * this->thread_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessInfo::MergeFrom(const ProcessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  thread_id_.MergeFrom(from.thread_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executable()) {
      set_executable(from.executable());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_is64bit()) {
      set_is64bit(from.is64bit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProcessInfo::Swap(ProcessInfo* other) {
  if (other != this) {
    std::swap(executable_, other->executable_);
    std::swap(pid_, other->pid_);
    std::swap(is64bit_, other->is64bit_);
    thread_id_.Swap(&other->thread_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessInfo_descriptor_;
  metadata.reflection = ProcessInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionArgument::kTypeFieldNumber;
const int FunctionArgument::kAddressFieldNumber;
const int FunctionArgument::kDataFieldNumber;
#endif  // !_MSC_VER

FunctionArgument::FunctionArgument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionArgument::InitAsDefaultInstance() {
}

FunctionArgument::FunctionArgument(const FunctionArgument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionArgument::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionArgument::~FunctionArgument() {
  SharedDtor();
}

void FunctionArgument::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FunctionArgument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionArgument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionArgument_descriptor_;
}

const FunctionArgument& FunctionArgument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

FunctionArgument* FunctionArgument::default_instance_ = NULL;

FunctionArgument* FunctionArgument::New() const {
  return new FunctionArgument;
}

void FunctionArgument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    address_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionArgument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.DebugType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::DebugType_IsValid(value)) {
            set_type(static_cast< ::proto::DebugType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_address;
        break;
      }

      // required uint64 address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionArgument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.DebugType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->address(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionArgument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.DebugType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->address(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionArgument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.DebugType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionArgument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionArgument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionArgument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionArgument::MergeFrom(const FunctionArgument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionArgument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionArgument::CopyFrom(const FunctionArgument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionArgument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FunctionArgument::Swap(FunctionArgument* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(address_, other->address_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionArgument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionArgument_descriptor_;
  metadata.reflection = FunctionArgument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionCall::kNameFieldNumber;
const int FunctionCall::kThreadIdFieldNumber;
const int FunctionCall::kReturnTypeFieldNumber;
const int FunctionCall::kReturnDataFieldNumber;
const int FunctionCall::kArgumentsFieldNumber;
#endif  // !_MSC_VER

FunctionCall::FunctionCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionCall::InitAsDefaultInstance() {
}

FunctionCall::FunctionCall(const FunctionCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionCall::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thread_id_ = GOOGLE_ULONGLONG(0);
  return_type_ = 0;
  return_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionCall::~FunctionCall() {
  SharedDtor();
}

void FunctionCall::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (return_data_ != &::google::protobuf::internal::kEmptyString) {
    delete return_data_;
  }
  if (this != default_instance_) {
  }
}

void FunctionCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionCall_descriptor_;
}

const FunctionCall& FunctionCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

FunctionCall* FunctionCall::default_instance_ = NULL;

FunctionCall* FunctionCall::New() const {
  return new FunctionCall;
}

void FunctionCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    thread_id_ = GOOGLE_ULONGLONG(0);
    return_type_ = 0;
    if (has_return_data()) {
      if (return_data_ != &::google::protobuf::internal::kEmptyString) {
        return_data_->clear();
      }
    }
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }

      // optional uint64 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_return_type;
        break;
      }

      // optional .proto.DebugType return_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::DebugType_IsValid(value)) {
            set_return_type(static_cast< ::proto::DebugType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_return_data;
        break;
      }

      // optional bytes return_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_return_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_return_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_arguments;
        break;
      }

      // repeated .proto.FunctionArgument arguments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint64 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_id(), output);
  }

  // optional .proto.DebugType return_type = 3;
  if (has_return_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->return_type(), output);
  }

  // optional bytes return_data = 4;
  if (has_return_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->return_data(), output);
  }

  // repeated .proto.FunctionArgument arguments = 5;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arguments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_id(), target);
  }

  // optional .proto.DebugType return_type = 3;
  if (has_return_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->return_type(), target);
  }

  // optional bytes return_data = 4;
  if (has_return_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->return_data(), target);
  }

  // repeated .proto.FunctionArgument arguments = 5;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arguments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_id());
    }

    // optional .proto.DebugType return_type = 3;
    if (has_return_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->return_type());
    }

    // optional bytes return_data = 4;
    if (has_return_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->return_data());
    }

  }
  // repeated .proto.FunctionArgument arguments = 5;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionCall::MergeFrom(const FunctionCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_return_type()) {
      set_return_type(from.return_type());
    }
    if (from.has_return_data()) {
      set_return_data(from.return_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < arguments_size(); i++) {
    if (!this->arguments(i).IsInitialized()) return false;
  }
  return true;
}

void FunctionCall::Swap(FunctionCall* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(return_type_, other->return_type_);
    std::swap(return_data_, other->return_data_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionCall_descriptor_;
  metadata.reflection = FunctionCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLFunction::kPrefixFieldNumber;
const int GLFunction::kExtnameFieldNumber;
const int GLFunction::kNameFieldNumber;
const int GLFunction::kIsDebuggableFieldNumber;
const int GLFunction::kPrimitiveModeIndexFieldNumber;
const int GLFunction::kIsShaderSwitchFieldNumber;
const int GLFunction::kIsFrameEndFieldNumber;
const int GLFunction::kIsFramebufferChangeFieldNumber;
#endif  // !_MSC_VER

GLFunction::GLFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLFunction::InitAsDefaultInstance() {
}

GLFunction::GLFunction(const GLFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLFunction::SharedCtor() {
  _cached_size_ = 0;
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_debuggable_ = false;
  primitive_mode_index_ = 0;
  is_shader_switch_ = false;
  is_frame_end_ = false;
  is_framebuffer_change_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLFunction::~GLFunction() {
  SharedDtor();
}

void GLFunction::SharedDtor() {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (extname_ != &::google::protobuf::internal::kEmptyString) {
    delete extname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GLFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLFunction_descriptor_;
}

const GLFunction& GLFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

GLFunction* GLFunction::default_instance_ = NULL;

GLFunction* GLFunction::New() const {
  return new GLFunction;
}

void GLFunction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
    if (has_extname()) {
      if (extname_ != &::google::protobuf::internal::kEmptyString) {
        extname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    is_debuggable_ = false;
    primitive_mode_index_ = 0;
    is_shader_switch_ = false;
    is_frame_end_ = false;
    is_framebuffer_change_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string prefix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extname;
        break;
      }

      // required string extname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extname().data(), this->extname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_debuggable;
        break;
      }

      // required bool is_debuggable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_debuggable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debuggable_)));
          set_has_is_debuggable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_primitive_mode_index;
        break;
      }

      // required int32 primitive_mode_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_primitive_mode_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primitive_mode_index_)));
          set_has_primitive_mode_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_shader_switch;
        break;
      }

      // required bool is_shader_switch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_shader_switch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shader_switch_)));
          set_has_is_shader_switch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_frame_end;
        break;
      }

      // required bool is_frame_end = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_frame_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_frame_end_)));
          set_has_is_frame_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_framebuffer_change;
        break;
      }

      // required bool is_framebuffer_change = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_framebuffer_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_framebuffer_change_)));
          set_has_is_framebuffer_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->prefix(), output);
  }

  // required string extname = 2;
  if (has_extname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extname().data(), this->extname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->extname(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required bool is_debuggable = 4;
  if (has_is_debuggable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_debuggable(), output);
  }

  // required int32 primitive_mode_index = 5;
  if (has_primitive_mode_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->primitive_mode_index(), output);
  }

  // required bool is_shader_switch = 6;
  if (has_is_shader_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_shader_switch(), output);
  }

  // required bool is_frame_end = 7;
  if (has_is_frame_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_frame_end(), output);
  }

  // required bool is_framebuffer_change = 8;
  if (has_is_framebuffer_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_framebuffer_change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // required string extname = 2;
  if (has_extname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extname().data(), this->extname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extname(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required bool is_debuggable = 4;
  if (has_is_debuggable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_debuggable(), target);
  }

  // required int32 primitive_mode_index = 5;
  if (has_primitive_mode_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->primitive_mode_index(), target);
  }

  // required bool is_shader_switch = 6;
  if (has_is_shader_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_shader_switch(), target);
  }

  // required bool is_frame_end = 7;
  if (has_is_frame_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_frame_end(), target);
  }

  // required bool is_framebuffer_change = 8;
  if (has_is_framebuffer_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_framebuffer_change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string prefix = 1;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // required string extname = 2;
    if (has_extname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extname());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool is_debuggable = 4;
    if (has_is_debuggable()) {
      total_size += 1 + 1;
    }

    // required int32 primitive_mode_index = 5;
    if (has_primitive_mode_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primitive_mode_index());
    }

    // required bool is_shader_switch = 6;
    if (has_is_shader_switch()) {
      total_size += 1 + 1;
    }

    // required bool is_frame_end = 7;
    if (has_is_frame_end()) {
      total_size += 1 + 1;
    }

    // required bool is_framebuffer_change = 8;
    if (has_is_framebuffer_change()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLFunction::MergeFrom(const GLFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_extname()) {
      set_extname(from.extname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_debuggable()) {
      set_is_debuggable(from.is_debuggable());
    }
    if (from.has_primitive_mode_index()) {
      set_primitive_mode_index(from.primitive_mode_index());
    }
    if (from.has_is_shader_switch()) {
      set_is_shader_switch(from.is_shader_switch());
    }
    if (from.has_is_frame_end()) {
      set_is_frame_end(from.is_frame_end());
    }
    if (from.has_is_framebuffer_change()) {
      set_is_framebuffer_change(from.is_framebuffer_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLFunction::CopyFrom(const GLFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLFunction::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GLFunction::Swap(GLFunction* other) {
  if (other != this) {
    std::swap(prefix_, other->prefix_);
    std::swap(extname_, other->extname_);
    std::swap(name_, other->name_);
    std::swap(is_debuggable_, other->is_debuggable_);
    std::swap(primitive_mode_index_, other->primitive_mode_index_);
    std::swap(is_shader_switch_, other->is_shader_switch_);
    std::swap(is_frame_end_, other->is_frame_end_);
    std::swap(is_framebuffer_change_, other->is_framebuffer_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLFunction_descriptor_;
  metadata.reflection = GLFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLFunctions::kFunctionFieldNumber;
#endif  // !_MSC_VER

GLFunctions::GLFunctions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GLFunctions::InitAsDefaultInstance() {
}

GLFunctions::GLFunctions(const GLFunctions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GLFunctions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLFunctions::~GLFunctions() {
  SharedDtor();
}

void GLFunctions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLFunctions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLFunctions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLFunctions_descriptor_;
}

const GLFunctions& GLFunctions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

GLFunctions* GLFunctions::default_instance_ = NULL;

GLFunctions* GLFunctions::New() const {
  return new GLFunctions;
}

void GLFunctions::Clear() {
  function_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLFunctions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GLFunction function = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_function()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_function;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLFunctions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.GLFunction function = 1;
  for (int i = 0; i < this->function_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->function(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GLFunctions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.GLFunction function = 1;
  for (int i = 0; i < this->function_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->function(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GLFunctions::ByteSize() const {
  int total_size = 0;

  // repeated .proto.GLFunction function = 1;
  total_size += 1 * this->function_size();
  for (int i = 0; i < this->function_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->function(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLFunctions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLFunctions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLFunctions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLFunctions::MergeFrom(const GLFunctions& from) {
  GOOGLE_CHECK_NE(&from, this);
  function_.MergeFrom(from.function_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLFunctions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLFunctions::CopyFrom(const GLFunctions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLFunctions::IsInitialized() const {

  for (int i = 0; i < function_size(); i++) {
    if (!this->function(i).IsInitialized()) return false;
  }
  return true;
}

void GLFunctions::Swap(GLFunctions* other) {
  if (other != this) {
    function_.Swap(&other->function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLFunctions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLFunctions_descriptor_;
  metadata.reflection = GLFunctions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerMessage::kErrorCodeFieldNumber;
const int ServerMessage::kIdFieldNumber;
const int ServerMessage::kMessageFieldNumber;
const int ServerMessage::kFunctionCallFieldNumber;
const int ServerMessage::kGlFunctionsFieldNumber;
const int ServerMessage::kProcInfoFieldNumber;
#endif  // !_MSC_VER

ServerMessage::ServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerMessage::InitAsDefaultInstance() {
  gl_functions_ = const_cast< ::proto::GLFunctions*>(&::proto::GLFunctions::default_instance());
  proc_info_ = const_cast< ::proto::ProcessInfo*>(&::proto::ProcessInfo::default_instance());
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gl_functions_ = NULL;
  proc_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessage::~ServerMessage() {
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete gl_functions_;
    delete proc_info_;
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_descriptor_;
}

const ServerMessage& ServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_debugger_2eproto();
  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New() const {
  return new ServerMessage;
}

void ServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_gl_functions()) {
      if (gl_functions_ != NULL) gl_functions_->::proto::GLFunctions::Clear();
    }
    if (has_proc_info()) {
      if (proc_info_ != NULL) proc_info_->::proto::ProcessInfo::Clear();
    }
  }
  function_call_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ErrorCode error_code = 1 [default = NONE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::proto::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_function_call;
        break;
      }

      // repeated .proto.FunctionCall function_call = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_function_call()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_function_call;
        if (input->ExpectTag(42)) goto parse_gl_functions;
        break;
      }

      // optional .proto.GLFunctions gl_functions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gl_functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gl_functions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_info;
        break;
      }

      // optional .proto.ProcessInfo proc_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.ErrorCode error_code = 1 [default = NONE];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // required uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }

  // repeated .proto.FunctionCall function_call = 4;
  for (int i = 0; i < this->function_call_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->function_call(i), output);
  }

  // optional .proto.GLFunctions gl_functions = 5;
  if (has_gl_functions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gl_functions(), output);
  }

  // optional .proto.ProcessInfo proc_info = 6;
  if (has_proc_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->proc_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.ErrorCode error_code = 1 [default = NONE];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // required uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // repeated .proto.FunctionCall function_call = 4;
  for (int i = 0; i < this->function_call_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->function_call(i), target);
  }

  // optional .proto.GLFunctions gl_functions = 5;
  if (has_gl_functions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gl_functions(), target);
  }

  // optional .proto.ProcessInfo proc_info = 6;
  if (has_proc_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->proc_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ErrorCode error_code = 1 [default = NONE];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // required uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .proto.GLFunctions gl_functions = 5;
    if (has_gl_functions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gl_functions());
    }

    // optional .proto.ProcessInfo proc_info = 6;
    if (has_proc_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proc_info());
    }

  }
  // repeated .proto.FunctionCall function_call = 4;
  total_size += 1 * this->function_call_size();
  for (int i = 0; i < this->function_call_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->function_call(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  function_call_.MergeFrom(from.function_call_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_gl_functions()) {
      mutable_gl_functions()->::proto::GLFunctions::MergeFrom(from.gl_functions());
    }
    if (from.has_proc_info()) {
      mutable_proc_info()->::proto::ProcessInfo::MergeFrom(from.proc_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < function_call_size(); i++) {
    if (!this->function_call(i).IsInitialized()) return false;
  }
  if (has_gl_functions()) {
    if (!this->gl_functions().IsInitialized()) return false;
  }
  if (has_proc_info()) {
    if (!this->proc_info().IsInitialized()) return false;
  }
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(id_, other->id_);
    std::swap(message_, other->message_);
    function_call_.Swap(&other->function_call_);
    std::swap(gl_functions_, other->gl_functions_);
    std::swap(proc_info_, other->proc_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessage_descriptor_;
  metadata.reflection = ServerMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
